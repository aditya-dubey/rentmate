{
  "faulty_codes": [
    {
      "id": 1,
      "description": "Faulty database connection with no error handling. Connects only once without retries.",
      "code_snippet": "def connect_to_database():\n    connection = db.connect()\n    return connection\n\nconn = connect_to_database()",
      "stack_trace": "OperationalError: could not connect to server: Connection refused",
      "capstone": false
    },
    {
      "id": 2,
      "description": "Database connection code that fails when the host is unreachable due to missing timeout settings.",
      "code_snippet": "def connect_to_database():\n    connection = db.connect(host='192.168.1.100')\n    return connection\n\nconn = connect_to_database()",
      "stack_trace": "OperationalError: could not connect to server: Network is unreachable",
      "capstone": false
    },
    {
      "id": 3,
      "description": "Simple connection function that lacks exception handling; fails silently on error.",
      "code_snippet": "def connect_to_database():\n    connection = db.connect()\n    return connection\n\nprint(connect_to_database())",
      "stack_trace": "OperationalError: could not connect to server: Connection refused",
      "capstone": false
    },
    {
      "id": 4,
      "description": "Database connection code missing a retry mechanism when the first connection attempt fails.",
      "code_snippet": "def connect_to_database():\n    connection = db.connect()\n    return connection\n\nconn = connect_to_database()",
      "stack_trace": "OperationalError: could not connect to server: Connection refused",
      "capstone": false
    },
    {
      "id": 5,
      "description": "Capstone: Faulty database connection code causing production downtime. This should be fixed by adding proper error handling with retries and exponential backoff.",
      "code_snippet": "def connect_to_database():\n    # Original code without error handling\n    connection = db.connect()\n    return connection\n\nconn = connect_to_database()",
      "stack_trace": "OperationalError: could not connect to server: Connection refused",
      "capstone": true
    },
    {
        "id": 6,
        "description": "Division by zero error in mathematical calculation.",
        "code_snippet": "def divide_numbers(a, b):\n    return a / b\n\nresult = divide_numbers(10, 0)",
        "stack_trace": "ZeroDivisionError: division by zero",
        "capstone": false
    },
    {
        "id": 7,
        "description": "File not found error due to incorrect file path.",
        "code_snippet": "def read_file(file_path):\n    with open(file_path, 'r') as file:\n        return file.read()\n\ncontent = read_file('non_existent_file.txt')",
        "stack_trace": "FileNotFoundError: [Errno 2] No such file or directory: 'non_existent_file.txt'",
        "capstone": false
    },
    {
        "id": 8,
        "description": "Key error when accessing a non-existent dictionary key.",
        "code_snippet": "def get_value(dictionary, key):\n    return dictionary[key]\n\nvalue = get_value({'a': 1}, 'b')",
        "stack_trace": "KeyError: 'b'",
        "capstone": false
    },
    {
        "id": 9,
        "description": "Index out of range error in list access.",
        "code_snippet": "def get_element(lst, index):\n    return lst[index]\n\nelement = get_element([1, 2, 3], 5)",
        "stack_trace": "IndexError: list index out of range",
        "capstone": false
    },
    {
        "id": 10,
        "description": "Attribute error due to missing method in class.",
        "code_snippet": "class MyClass:\n    def __init__(self):\n        self.value = 10\n\nobj = MyClass()\nresult = obj.non_existent_method()",
        "stack_trace": "AttributeError: 'MyClass' object has no attribute 'non_existent_method'",
        "capstone": false
    },
    {
        "id": 11,
        "description": "Import error due to missing module.",
        "code_snippet": "import non_existent_module\n\nprint(non_existent_module.some_function())",
        "stack_trace": "ModuleNotFoundError: No module named 'non_existent_module'",
        "capstone": false
    },
    {
        "id": 12,
        "description": "Value error due to invalid argument.",
        "code_snippet": "import math\n\nresult = math.sqrt(-1)",
        "stack_trace": "ValueError: math domain error",
        "capstone": false
    },
    {
        "id": 13,
        "description": "Type error due to incorrect function argument type.",
        "code_snippet": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers('10', 5)",
        "stack_trace": "TypeError: can only concatenate str (not 'int') to str",
        "capstone": false
    },
    {
        "id": 14,
        "description": "Name error due to undefined variable.",
        "code_snippet": "def calculate_area(radius):\n    return pi * radius ** 2\n\narea = calculate_area(5)",
        "stack_trace": "NameError: name 'pi' is not defined",
        "capstone": false
    },
    {
        "id": 15,
        "description": "Indentation error due to inconsistent indentation.",
        "code_snippet": "def my_function():\n    x = 10\n     y = 20\n    return x + y",
        "stack_trace": "IndentationError: unexpected indent",
        "capstone": false
    },
    {
        "id": 16,
        "description": "Recursion error due to infinite recursion.",
        "code_snippet": "def recursive_function():\n    return recursive_function()\n\nrecursive_function()",
        "stack_trace": "RecursionError: maximum recursion depth exceeded",
        "capstone": false
    },
    {
        "id": 17,
        "description": "Memory error due to excessive memory allocation.",
        "code_snippet": "def allocate_large_memory():\n    large_list = [0] * (10**10)\n    return large_list\n\nallocate_large_memory()",
        "stack_trace": "MemoryError",
        "capstone": false
    },
    {
        "id": 18,
        "description": "Overflow error in arithmetic operation.",
        "code_snippet": "import math\n\nresult = math.exp(1000)",
        "stack_trace": "OverflowError: math range error",
        "capstone": false
    },
    {
        "id": 19,
        "description": "Unicode error due to invalid encoding.",
        "code_snippet": "def decode_string(encoded_str):\n    return encoded_str.decode('ascii')\n\nresult = decode_string(b'\\xff')",
        "stack_trace": "UnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 0: ordinal not in range(128)",
        "capstone": false
    },
    {
        "id": 20,
        "description": "Assertion error due to failed assertion.",
        "code_snippet": "def check_positive(number):\n    assert number > 0, 'Number must be positive'\n\ncheck_positive(-5)",
        "stack_trace": "AssertionError: Number must be positive",
        "capstone": false
    },
    {
        "id": 21,
        "description": "Syntax error due to missing parentheses in function call.",
        "code_snippet": "print 'Hello, World!'",
        "stack_trace": "SyntaxError: Missing parentheses in call to 'print'. Did you mean print('Hello, World!')?",
        "capstone": false
    },
    {
        "id": 22,
        "description": "Connection error due to network issues.",
        "code_snippet": "import requests\n\nresponse = requests.get('http://example.com')",
        "stack_trace": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='example.com', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x...>: Failed to establish a new connection: [Errno 110] Connection timed out'))",
        "capstone": false
    },
    {
        "id": 23,
        "description": "Timeout error due to long-running operation.",
        "code_snippet": "import time\n\ndef long_running_operation():\n    time.sleep(10)\n\nlong_running_operation()",
        "stack_trace": "TimeoutError: Operation timed out",
        "capstone": false
    },
    {
        "id": 24,
        "description": "Permission error due to restricted file access.",
        "code_snippet": "def write_to_file(file_path):\n    with open(file_path, 'w') as file:\n        file.write('Hello, World!')\n\nwrite_to_file('/restricted_path/file.txt')",
        "stack_trace": "PermissionError: [Errno 13] Permission denied: '/restricted_path/file.txt'",
        "capstone": false
    },
    {
        "id": 25,
        "description": "Broken pipe error due to closed connection.",
        "code_snippet": "import socket\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect(('localhost', 12345))\nsock.sendall(b'Hello, World!')\nsock.close()\nsock.sendall(b'Goodbye!')",
        "stack_trace": "BrokenPipeError: [Errno 32] Broken pipe",
        "capstone": false
    }
  ]
}
